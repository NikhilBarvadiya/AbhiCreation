// ignore_for_file: non_constant_identifier_names, file_namesimport 'package:abhicreativefashion/Auth/AuthService.dart';import 'package:abhicreativefashion/Common/Widget/Custom.dart';import 'package:abhicreativefashion/Common/Widget/validator.dart';import 'package:abhicreativefashion/Data/SharedPefences.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';class RegisterScreen extends StatefulWidget {  const RegisterScreen({Key? key}) : super(key: key);  @override  State<RegisterScreen> createState() => _RegisterScreenState();}class _RegisterScreenState extends State<RegisterScreen> {  final _registerFormKey = GlobalKey<FormState>();  final TextEditingController _emailTextController = TextEditingController();  final TextEditingController _passwordTextController = TextEditingController();  final _focusEmail = FocusNode();  final _focusPassword = FocusNode();  FirebaseAuth firebaseAuth = FirebaseAuth.instance;  final bool _isObscure = true;  bool _isProcessing = false;  bool isLoggedIn = false;  @override  void initState() {    super.initState();    MySharedPreferences.instance        .getBooleanValue("loggedin")        .then((value) => setState(() {              isLoggedIn = value;            }));    _User();  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: Padding(        padding: const EdgeInsets.symmetric(vertical: 50.0, horizontal: 50.0),        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          children: [            Form(              key: _registerFormKey,              child: Column(                children: <Widget>[                  CustomTextField(                    icon: Icons.email,                    color: Colors.grey,                    height: 50,                    width: 300,                    Name: "Email",                    keyboardType: TextInputType.emailAddress,                    controller: _emailTextController,                    focusNode: _focusEmail,                    validator: (value) => Validator.validateEmail(                      email: value,                    ),                  ),                  const SizedBox(height: 16.0),                  CustomTextField(                    icon: Icons.lock,                    color: Colors.grey,                    height: 50,                    width: 300,                    Name: "Password",                    controller: _passwordTextController,                    focusNode: _focusPassword,                    hide: _isObscure,                    validator: (value) => Validator.validatePassword(                      password: value,                    ),                  ),                  const SizedBox(                    width: 200,                    height: 50,                  ),                  _isProcessing                      ? const CircularProgressIndicator(                          color: Colors.deepOrange,                        )                      : CustomBotton(                          height: 50,                          width: 300,                          text: "Sign up",                          function: () async {                            MySharedPreferences.instance.setStringValue(                                'email', _emailTextController.text);                            if (_registerFormKey.currentState!.validate()) {                              setState(() {                                _isProcessing = true;                              });                              User? user =                                  await FireAuth.registerUsingEmailPassword(                                email: _emailTextController.text,                                password: _passwordTextController.text,                              );                              setState(() {                                _isProcessing = false;                              });                              if (user != null) {                                Navigator.pushNamed(                                  context,                                  '/FirstScreenRoute',                                  arguments: user,                                );                              }                            }                            _User();                          },                        ),                ],              ),            )          ],        ),      ),    );  }  void _User() {    if (firebaseAuth.currentUser != null) {      Navigator.pushNamed(        context,        '/FirstScreenRoute',      );    }  }}