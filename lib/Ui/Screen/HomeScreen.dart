import 'package:abhicreativefashion/Auth/real_database.dart';import 'package:abhicreativefashion/Common/Utils/Utils.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:month_picker_dialog/month_picker_dialog.dart';class Home_Screen extends StatefulWidget {  const Home_Screen({Key? key}) : super(key: key);  @override  State<Home_Screen> createState() => _Home_ScreenState();}class _Home_ScreenState extends State<Home_Screen> {  RealDatabase realDatabase = RealDatabase();  DateTime? selectedDate = DateTime.now();  bool on = true;  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        automaticallyImplyLeading: false,        foregroundColor: on ? Colors.green : Colors.red,        backgroundColor: Colors.white,        title: Text(on            ? "${DateFormat.yMMM().format(selectedDate!)} Completed "                "Order"            : "${DateFormat.yMMM().format(selectedDate!)} Return "                "Order"),        actions: [          GestureDetector(            onTap: () {              setState(() {                on = !on;              });            },            child: Icon(              on ? Icons.flash_on_rounded : Icons.assignment_return_outlined,              size: 30,            ),          ),          const SizedBox(width: 15),          GestureDetector(            onTap: () {},            child: Icon(              Icons.history,              size: 30,            ),          ),          const SizedBox(width: 15),        ],      ),      floatingActionButton: FloatingActionButton(        onPressed: () {          buildShowDatePicker(context);          realDatabase.ReadDataMonthFilter(              "${DateFormat.yMMM().format(selectedDate!)}",          );        },        backgroundColor: on ? Colors.green : Colors.red,        child: const Icon(Icons.date_range),      ),      body: on          ? StreamBuilder(              stream: realDatabase.ReadDataMonthFilter(                "${DateFormat.yMMM().format(selectedDate!)}",              ),              builder: (context, AsyncSnapshot snapshot) {                if (snapshot.hasData) {                  if (snapshot.data.snapshot.value != null) {                    Map map = snapshot.data.snapshot.value;                    List l1 = [];                    map.forEach(                      (key, value) {                        l1.add({"key": key, ...value});                      },                    );                    return SizedBox(                      height: MediaQuery.of(context).size.height,                      child: ListView.builder(                        itemCount: l1.length,                        physics: const BouncingScrollPhysics(),                        itemBuilder: (context, index) {                          return Padding(                            padding: const EdgeInsets.symmetric(                              horizontal: 10.0,                              vertical: 15.0,                            ),                            child: Row(                              children: [                                Card(                                  elevation: 3,                                  clipBehavior: Clip.antiAlias,                                  shadowColor: Colors.redAccent,                                  child: Container(                                    margin: const EdgeInsets.symmetric(                                      horizontal: 10.0,                                      vertical: 8.0,                                    ),                                    child: Text('${index + 1}'),                                  ),                                ),                                Card(                                  elevation: 3,                                  clipBehavior: Clip.antiAlias,                                  shadowColor: Colors.redAccent,                                  color: Colors.white,                                  child: Container(                                    margin: const EdgeInsets.symmetric(                                      horizontal: 10.0,                                      vertical: 8.0,                                    ),                                    width: Utils.getWidth(context) * 0.5,                                    child: Row(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        Column(                                          crossAxisAlignment:                                              CrossAxisAlignment.start,                                          children: [                                            Text(                                              "${l1[index]['Barcode Type']}",                                              style: const TextStyle(                                                  color: Colors.black,                                                  fontWeight: FontWeight.bold),                                            ),                                            Text(                                              "${l1[index]['Data']}",                                              style: const TextStyle(                                                  color: Colors.red),                                            ),                                          ],                                        ),                                        const Expanded(                                          child: SizedBox(),                                        ),                                        Column(                                          crossAxisAlignment:                                              CrossAxisAlignment.end,                                          children: [                                            Text(                                              "${l1[index]['DateTime']}",                                              style: const TextStyle(                                                color: Colors.black,                                                fontWeight: FontWeight.bold,                                                fontSize: 10,                                              ),                                            ),                                            Text(                                              "${l1[index]['Time']}",                                              style:                                                  const TextStyle(fontSize: 10),                                            ),                                          ],                                        ),                                      ],                                    ),                                  ),                                ),                                GestureDetector(                                  onTap: () {                                    realDatabase.Delete1Data(l1[index]['key']);                                  },                                  child: Card(                                    elevation: 3,                                    clipBehavior: Clip.antiAlias,                                    shadowColor: Colors.redAccent,                                    child: Container(                                      margin: const EdgeInsets.symmetric(                                          horizontal: 10.0, vertical: 8.0),                                      child: const Icon(Icons.delete),                                    ),                                  ),                                ),                                GestureDetector(                                  onTap: () {},                                  child: Card(                                    elevation: 3,                                    clipBehavior: Clip.antiAlias,                                    shadowColor: Colors.redAccent,                                    child: Container(                                      margin: const EdgeInsets.symmetric(                                          horizontal: 10.0, vertical: 8.0),                                      child: const Icon(                                          Icons.picture_as_pdf_outlined),                                    ),                                  ),                                ),                              ],                            ),                          );                        },                      ),                    );                  }                } else if (snapshot.hasError) {                  return const Center(                    child: CircularProgressIndicator(                      color: Colors.red,                    ),                  );                }                return const Center(                  child: Text(                    "ðŸ˜’ Recode NotFound ðŸ˜’",                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),                  ),                );              },            )          : StreamBuilder(              stream: realDatabase.Read1DataMonthFilter(                "${DateFormat.yMMM().format(selectedDate!)}",              ),              builder: (context, AsyncSnapshot snapshot) {                if (snapshot.hasData) {                  if (snapshot.data.snapshot.value != null) {                    Map map = snapshot.data.snapshot.value;                    List l1 = [];                    map.forEach(                      (key, value) {                        l1.add({"key": key, ...value});                      },                    );                    return SizedBox(                      height: MediaQuery.of(context).size.height,                      child: ListView.builder(                        itemCount: l1.length,                        physics: const BouncingScrollPhysics(),                        itemBuilder: (context, index) {                          return Padding(                            padding: const EdgeInsets.symmetric(                              horizontal: 10.0,                              vertical: 15.0,                            ),                            child: Row(                              children: [                                Card(                                  elevation: 3,                                  clipBehavior: Clip.antiAlias,                                  shadowColor: Colors.redAccent,                                  child: Container(                                    margin: const EdgeInsets.symmetric(                                      horizontal: 10.0,                                      vertical: 8.0,                                    ),                                    child: Text('${index + 1}'),                                  ),                                ),                                Card(                                  elevation: 3,                                  clipBehavior: Clip.antiAlias,                                  shadowColor: Colors.redAccent,                                  color: Colors.white,                                  child: Container(                                    margin: const EdgeInsets.symmetric(                                      horizontal: 10.0,                                      vertical: 8.0,                                    ),                                    width: Utils.getWidth(context) * 0.5,                                    child: Row(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        Column(                                          crossAxisAlignment:                                              CrossAxisAlignment.start,                                          children: [                                            Text(                                              "${l1[index]['Barcode Type']}",                                              style: const TextStyle(                                                  color: Colors.black,                                                  fontWeight: FontWeight.bold),                                            ),                                            Text(                                              "${l1[index]['Data']}",                                              style: const TextStyle(                                                  color: Colors.red),                                            ),                                          ],                                        ),                                        const Expanded(                                          child: SizedBox(),                                        ),                                        Column(                                          crossAxisAlignment:                                              CrossAxisAlignment.end,                                          children: [                                            Text(                                              "${l1[index]['DateTime']}",                                              style: const TextStyle(                                                color: Colors.black,                                                fontWeight: FontWeight.bold,                                                fontSize: 10,                                              ),                                            ),                                            Text(                                              "${l1[index]['Time']}",                                              style:                                                  const TextStyle(fontSize: 10),                                            ),                                          ],                                        ),                                      ],                                    ),                                  ),                                ),                                GestureDetector(                                  onTap: () {                                    realDatabase.Delete1Data(l1[index]['key']);                                  },                                  child: Card(                                    elevation: 3,                                    clipBehavior: Clip.antiAlias,                                    shadowColor: Colors.redAccent,                                    child: Container(                                      margin: const EdgeInsets.symmetric(                                          horizontal: 10.0, vertical: 8.0),                                      child: const Icon(Icons.delete),                                    ),                                  ),                                ),                                GestureDetector(                                  onTap: () {},                                  child: Card(                                    elevation: 3,                                    clipBehavior: Clip.antiAlias,                                    shadowColor: Colors.redAccent,                                    child: Container(                                      margin: const EdgeInsets.symmetric(                                          horizontal: 10.0, vertical: 8.0),                                      child: const Icon(                                          Icons.picture_as_pdf_outlined),                                    ),                                  ),                                ),                              ],                            ),                          );                        },                      ),                    );                  }                } else if (snapshot.hasError) {                  return const Center(                    child: CircularProgressIndicator(                      color: Colors.red,                    ),                  );                }                return const Center(                  child: Text(                    "ðŸ˜’ Recode NotFound ðŸ˜’",                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),                  ),                );              },            ),    );  }  Future<DateTime?> buildShowDatePicker(BuildContext context) =>      showMonthPicker(        context: context,        initialDate: selectedDate!,        firstDate: DateTime(DateTime.now().year - 1, 5),        lastDate: DateTime(DateTime.now().year + 1, 9),      ).then((date) {        if (date != null) {          setState(() {            selectedDate = date;          });        }      });}