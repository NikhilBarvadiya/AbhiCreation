import 'package:abhicreativefashion/Auth/real_database.dart';import 'package:abhicreativefashion/Common/Utils/Utils.dart';import 'dart:io';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:path_provider/path_provider.dart';import 'package:pdf/pdf.dart';import 'package:pdf/widgets.dart' as pw;import 'package:universal_html/html.dart' as html;class Return_Screen extends StatefulWidget {  const Return_Screen({Key? key}) : super(key: key);  @override  State<Return_Screen> createState() => _Return_ScreenState();}class _Return_ScreenState extends State<Return_Screen> {  RealDatabase realDatabase = RealDatabase();  final pdf = pw.Document();  final pdfInvoice = pw.Document();  writeOnPdf() {    pdf.addPage(      pw.MultiPage(        pageFormat: PdfPageFormat.a4,        margin: const pw.EdgeInsets.all(32),        build: (pw.Context context) {          return <pw.Widget>[            pw.Container(              alignment: pw.Alignment.center,              height: 20,              width: 531,              decoration: const pw.BoxDecoration(                border: pw.Border(                  left: pw.BorderSide(),                  right: pw.BorderSide(),                  top: pw.BorderSide(),                ),              ),              child: pw.Text("Receivers Invoice"),            ),            pw.Row(              children: [                pw.Container(                  alignment: pw.Alignment.center,                  height: 60,                  width: 60,                  decoration: const pw.BoxDecoration(                    border: pw.Border(                      top: pw.BorderSide(),                      right: pw.BorderSide(),                      left: pw.BorderSide(),                    ),                  ),                  child: pw.Column(                    mainAxisAlignment: pw.MainAxisAlignment.center,                    children: [                      pw.Text("JR No"),                      pw.Text(                        '2',                        style: pw.TextStyle(fontWeight: pw.FontWeight.bold),                      ),                    ],                  ),                ),                pw.Container(                  alignment: pw.Alignment.center,                  height: 60,                  width: 400,                  decoration: const pw.BoxDecoration(                    border: pw.Border(                      top: pw.BorderSide(),                      right: pw.BorderSide(),                    ),                  ),                  child: pw.Column(                    mainAxisAlignment: pw.MainAxisAlignment.center,                    crossAxisAlignment: pw.CrossAxisAlignment.center,                    children: [                      pw.Text(                        'AKSHAR DIAMOND GROOVING',                        style: pw.TextStyle(fontWeight: pw.FontWeight.bold),                      ),                      pw.Text(                          '(6/1435, Hanumansaran TobhaSheri, Mahidharpura, Surat)'),                      pw.Text(                          '0261-2608702 0261-3008702 0261-6698702 M:9274583225'),                    ],                  ),                ),                pw.Container(                  alignment: pw.Alignment.center,                  height: 60,                  width: 71,                  decoration: const pw.BoxDecoration(                    border: pw.Border(                      right: pw.BorderSide(),                      top: pw.BorderSide(),                    ),                  ),                  child: pw.Column(                    mainAxisAlignment: pw.MainAxisAlignment.center,                    crossAxisAlignment: pw.CrossAxisAlignment.center,                    children: [                      pw.Text(                        "DATE",                        style: pw.TextStyle(fontWeight: pw.FontWeight.bold),                      ),                      pw.Text("09-02-2022"),                    ],                  ),                ),              ],            ),            pw.Container(              height: 20,              width: 532,              alignment: pw.Alignment.centerLeft,              padding: const pw.EdgeInsets.only(left: 7),              decoration: pw.BoxDecoration(                border: pw.Border.all(color: PdfColors.black, width: 1),              ),              child: pw.Text("Party Name : CC"),            ),            pw.Table.fromTextArray(              context: context,              headers: [                "No",                "Quantity",                'Kapan',                'Khanch',                'Weight',                'Rate',                'Amount',              ],              cellAlignment: pw.Alignment.center,              data: <List>[                [                  "1",                  "2",                  '3',                  '4',                  '5',                  '6',                  '7',                ]              ],            ),            pw.SizedBox(height: 50),            pw.Container(              child: pw.Row(                children: [                  pw.Expanded(                    child: pw.Container(                      alignment: pw.Alignment.center,                      child: pw.Text("GIVEN BY:- ___________ \n (cc)"),                    ),                  ),                  pw.Expanded(                    child: pw.Container(                      alignment: pw.Alignment.center,                      child: pw.Text("FOR:- ___________ \n (Akshar Grooving)"),                    ),                  ),                ],              ),            ),          ];        },      ),    );  }  savePdfFile() async {    final dir = await getExternalStorageDirectory();    final String path = "${dir?.path}/Bill.pdf";    final file = File(path);    await file.writeAsBytes(await pdf.save());  }  @override  Widget build(BuildContext context) {    return StreamBuilder(      stream: realDatabase.ReadData(),      builder: (context, AsyncSnapshot snapshot) {        if (snapshot.hasData) {          Map map = snapshot.data.snapshot.value;          List l1 = [];          map.forEach((key, value) {            l1.add({"key": key, ...value});          });          return SizedBox(            height: MediaQuery.of(context).size.height,            child: ListView.builder(              itemCount: l1.length,              itemBuilder: (context, index) {                return Padding(                  padding: const EdgeInsets.symmetric(                      horizontal: 15.0, vertical: 15.0),                  child: Row(                    children: [                      Card(                        elevation: 3,                        clipBehavior: Clip.antiAlias,                        shadowColor: Colors.redAccent,                        child: Container(                          margin: const EdgeInsets.symmetric(                              horizontal: 15.0, vertical: 8.0),                          width: Utils.getWidth(context) * 0.5,                          child: Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              Text("${l1[index]['Barcode Type']}"),                              Text("${l1[index]['Data']}"),                            ],                          ),                        ),                      ),                      GestureDetector(                        onTap: () {                          realDatabase.DeleteData(l1[index]['key']);                        },                        child: Card(                          elevation: 3,                          clipBehavior: Clip.antiAlias,                          shadowColor: Colors.redAccent,                          child: Container(                            margin: const EdgeInsets.symmetric(                                horizontal: 15.0, vertical: 8.0),                            child: const Icon(Icons.delete),                          ),                        ),                      ),                      GestureDetector(                          onTap: () async {                            writeOnPdf();                            if (kIsWeb) {                              final bytes = await pdf.save();                              final blob = html.Blob([bytes], 'application/pdf');                              final url = html.Url.createObjectUrlFromBlob(blob);                              final anchor = html.AnchorElement()                                ..href = url                                ..style.display = 'none'                                ..download = 'Bill.pdf';                              html.document.body?.children.add(anchor);                              anchor.click();                              html.document.body?.children.remove(anchor);                              html.Url.revokeObjectUrl(url);                            } else {                              await savePdfFile();                                print("Saved Bill PDF");                              Directory documentDirectory =                              await getApplicationDocumentsDirectory();                              String documentPath = documentDirectory.path;                              String fullPath = "$documentPath/example.pdf";                                print(fullPath);                                print('Done Bill PDF');                            }                          },                        child: Card(                          elevation: 3,                          clipBehavior: Clip.antiAlias,                          shadowColor: Colors.redAccent,                          child: Container(                            margin: const EdgeInsets.symmetric(                                horizontal: 15.0, vertical: 8.0),                            child: const Icon(Icons.picture_as_pdf_outlined),                          ),                        ),                      ),                    ],                  ),                );              },            ),          );        } else {          return const Center(            child: CircularProgressIndicator(              color: Colors.red,            ),          );        }      },    );  }}