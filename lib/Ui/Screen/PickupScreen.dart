import 'dart:developer';import 'dart:io';import 'package:abhicreativefashion/Auth/real_database.dart';import 'package:abhicreativefashion/Common/Image/Images.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:qr_code_scanner/qr_code_scanner.dart';class Pickup_Screen extends StatefulWidget {  const Pickup_Screen({Key? key}) : super(key: key);  @override  State<Pickup_Screen> createState() => _Pickup_ScreenState();}class _Pickup_ScreenState extends State<Pickup_Screen> {  Barcode? result;  QRViewController? controller;  final GlobalKey qrKey = GlobalKey(debugLabel: 'QR');  RealDatabase realDatabase = RealDatabase();  @override  void reassemble() {    super.reassemble();    if (Platform.isAndroid) {      controller!.pauseCamera();    }    controller!.resumeCamera();  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.red,      body: Column(        children: <Widget>[          Expanded(flex: 4, child: _buildQrView(context)),          Expanded(            flex: 1,            child: FittedBox(              fit: BoxFit.contain,              child: Column(                mainAxisAlignment: MainAxisAlignment.spaceEvenly,                children: <Widget>[                  if (result != null)                    Text(                      'Barcode Type: ${describeEnum(result!.format)}Data: '                      '${result!.code}',                      style: const TextStyle(color: Colors.white),                    )                  else                    const Text(                      'Scan a code',                      style: TextStyle(color: Colors.white),                    ),                  Row(                    mainAxisAlignment: MainAxisAlignment.center,                    crossAxisAlignment: CrossAxisAlignment.center,                    children: <Widget>[                      Container(                        margin: const EdgeInsets.all(8),                        child: ElevatedButton.icon(                          label: const Text('Close'),                          style: ElevatedButton.styleFrom(                              primary: Colors.white, onPrimary: Colors.red),                          onPressed: () async {                            await controller?.pauseCamera();                          },                          icon: Image.asset(                            Images.scanner,                            fit: BoxFit.scaleDown,                            scale: 20,                            color: Colors.red,                          ),                        ),                      ),                      Container(                        margin: const EdgeInsets.all(8),                        child: ElevatedButton(                          child: const Text('Open'),                          style: ElevatedButton.styleFrom(                              primary: Colors.white, onPrimary: Colors.red),                          onPressed: () {                            // Get.to(                            //   Return_Screen(),                            //   arguments: [                            //     "${describeEnum(result!.format)}",                            //     "${result!.code}",                            //   ],                            // );                            Map map = {                              "Barcode Type": "${describeEnum(result!.format)}",                              "Data": "${result!.code}",                            };                            realDatabase.InsertData(map);                            Navigator.pushNamed(                              context,                              '/SecondScreenRoute',                              arguments: [                                map,                              ],                            );                          },                        ),                      ),                      Container(                        margin: const EdgeInsets.all(8),                        child: ElevatedButton.icon(                          label: const Text('Start'),                          icon: Image.asset(                            Images.scanner,                            fit: BoxFit.scaleDown,                            scale: 20,                            color: Colors.red,                          ),                          style: ElevatedButton.styleFrom(                              primary: Colors.white, onPrimary: Colors.red),                          onPressed: () async {                            await controller?.resumeCamera();                          },                        ),                      )                    ],                  ),                ],              ),            ),          )        ],      ),    );  }  Widget _buildQrView(BuildContext context) {    var scanArea = (MediaQuery.of(context).size.width < 400 ||            MediaQuery.of(context).size.height < 400)        ? 350.0        : 300.0;    return QRView(      key: qrKey,      onQRViewCreated: _onQRViewCreated,      overlay: QrScannerOverlayShape(          borderColor: Colors.red,          borderRadius: 10,          borderLength: 30,          borderWidth: 10,          cutOutSize: scanArea),      onPermissionSet: (ctrl, p) => _onPermissionSet(context, ctrl, p),    );  }  void _onQRViewCreated(QRViewController controller) {    setState(() {      this.controller = controller;    });    controller.scannedDataStream.listen((scanData) {      setState(() {        result = scanData;      });    });  }  void _onPermissionSet(BuildContext context, QRViewController ctrl, bool p) {    log('${DateTime.now().toIso8601String()}_onPermissionSet $p');    if (!p) {      ScaffoldMessenger.of(context).showSnackBar(        const SnackBar(content: Text('no Permission')),      );    }  }  @override  void dispose() {    controller?.dispose();    super.dispose();  }}